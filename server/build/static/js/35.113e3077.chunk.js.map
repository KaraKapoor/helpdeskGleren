{"version":3,"sources":["app/views/sessions/JwtRegister.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","matches","firstName","max","lastName","JwtRegister","theme","useTheme","navigate","useAuth","register","useNavigate","useState","loading","setLoading","showSendEmailBtn","setShowSendEmailBtn","showVerifyOTPBtn","setShowVerifyOTPBtn","showRegisterBtn","setShowRegisterBtn","className","container","item","sm","xs","width","alt","src","p","onSubmit","values","Swal","fire","icon","title","text","showCloseButton","showConfirmButton","workplace","formData","tenant_name","sendOTPEmail","then","data","status","error","otp","verifyOTPEmail","tenantName","registerTenant","e","console","log","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","Boolean","sx","mb","color","mt","to","style","palette","primary","main","marginLeft"],"mappings":"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","file":"static/js/35.113e3077.chunk.js","sourcesContent":["import { useTheme } from \"@emotion/react\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { Card, Checkbox, Grid, TextField } from \"@mui/material\";\r\nimport { Box, styled } from \"@mui/system\";\r\nimport { Paragraph } from \"app/components/Typography\";\r\nimport useAuth from \"app/hooks/useAuth\";\r\nimport { Formik } from \"formik\";\r\nimport { useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  registerTenant,\r\n  sendOTPEmail,\r\n  verifyOTPEmail,\r\n} from \"app/services/userService\";\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: \"flex\", alignItems: \"center\" }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: \"center\" }));\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n  height: \"100%\",\r\n  padding: \"32px\",\r\n  background: \"rgba(0, 0, 0, 0.01)\",\r\n}));\r\n\r\nconst JWTRegister = styled(JustifyBox)(() => ({\r\n  background: \"#1A2038\",\r\n  minHeight: \"100vh !important\",\r\n  \"& .card\": {\r\n    maxWidth: 800,\r\n    minHeight: 400,\r\n    margin: \"1rem\",\r\n    display: \"flex\",\r\n    borderRadius: 12,\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n  username: \"\",\r\n  remember: true,\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, \"Password must be 6 character length\")\r\n    .required(\"Password is required!\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\r\n    ),\r\n  firstName: Yup.string()\r\n    .matches(/^[A-Za-z ]*$/, \"Please enter valid First name\")\r\n    .max(40)\r\n    .required(\"FirstName is required!\"),\r\n\r\n  lastName: Yup.string()\r\n    .matches(/^[A-Za-z ]*$/, \"Please enter valid Last name\")\r\n    .max(40)\r\n    .required(\"LastName is required!\"),\r\n});\r\n\r\nconst JwtRegister = () => {\r\n  const theme = useTheme();\r\n  const { register } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [showSendEmailBtn, setShowSendEmailBtn] = useState(true);\r\n  const [showVerifyOTPBtn, setShowVerifyOTPBtn] = useState(false);\r\n  const [showRegisterBtn, setShowRegisterBtn] = useState(false);\r\n\r\n  const onClickVerifyEmail = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const handleFormSubmit = (values) => {\r\n    if (!values.firstName) {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Warning\",\r\n        text: \"Please enter your First Name\",\r\n        showCloseButton: true,\r\n        showConfirmButton: false,\r\n        width: 400,\r\n      });\r\n    } else if (!values.lastName) {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Warning\",\r\n        text: \"Please enter your Last Name\",\r\n        showCloseButton: true,\r\n        showConfirmButton: false,\r\n        width: 400,\r\n      });\r\n    } else if (!values.email) {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Warning\",\r\n        text: \"Please enter your email\",\r\n        showCloseButton: true,\r\n        showConfirmButton: false,\r\n        width: 400,\r\n      });\r\n    } else if (!values.workplace) {\r\n      return Swal.fire({\r\n        icon: \"warning\",\r\n        title: \"Warning\",\r\n        text: \"Please enter your Workplace Name\",\r\n        showCloseButton: true,\r\n        showConfirmButton: false,\r\n        width: 400,\r\n      });\r\n    }\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (showSendEmailBtn) {\r\n        const formData = {\r\n          email: values.email,\r\n          tenant_name: values.workplace,\r\n        };\r\n        sendOTPEmail(formData).then((data) => {\r\n          if (data.status === false) {\r\n            return Swal.fire({\r\n              icon: \"error\",\r\n              title: \"Error\",\r\n              text: data.error,\r\n              showCloseButton: true,\r\n              showConfirmButton: false,\r\n              width: 400,\r\n            }).then(function() {\r\n              navigate(\"/session/signin\");\r\n          });\r\n          }\r\n          \r\n           else {\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Success\",\r\n              text: \"OTP Sent Successfully\",\r\n              showCloseButton: true,\r\n              showConfirmButton: false,\r\n              width: 400,\r\n            });\r\n            setShowSendEmailBtn(false);\r\n            setShowVerifyOTPBtn(true);\r\n            return null;\r\n          }\r\n        });\r\n      } else if (showVerifyOTPBtn) {\r\n        const formData = {\r\n          otp: values.otp,\r\n          email: values.email,\r\n        };\r\n        verifyOTPEmail(formData).then((data) => {\r\n          if (data.status === false) {\r\n            return Swal.fire({\r\n              icon: \"error\",\r\n              title: \"Error\",\r\n              text: data.error,\r\n              showCloseButton: true,\r\n              showConfirmButton: false,\r\n              width: 400,\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Success\",\r\n              text: \"OTP Verified Successfully\",\r\n              showCloseButton: true,\r\n              showConfirmButton: false,\r\n              width: 400,\r\n            });\r\n            const formData = {\r\n              email: values.email,\r\n              tenantName: values.workplace,\r\n              password: values.password,\r\n              firstName: values.firstName,\r\n              lastName: values.lastName,\r\n            };\r\n            registerTenant(formData).then((data) => {\r\n              if (data.status === false) {\r\n                 Swal.fire({\r\n                  icon: \"error\",\r\n                  title: \"Error\",\r\n                  text: data.error,\r\n                  showCloseButton: true,\r\n                  showConfirmButton: false,\r\n                  width: 400,\r\n                });\r\n              } else {\r\n                Swal.fire({\r\n                  icon: \"success\",\r\n                  title: \"Success\",\r\n                  text: \"Account Created Successfully\",\r\n                  showCloseButton: true,\r\n                  showConfirmButton: false,\r\n                  width: 400,\r\n                });\r\n              }\r\n              navigate(\"/session/signin\");\r\n            });\r\n            setShowVerifyOTPBtn(false);\r\n            setShowRegisterBtn(true);\r\n            return null;\r\n          }\r\n        });\r\n      }\r\n\r\n      // not removing this add as it maybe needed in future //\r\n      \r\n      // } else if (showRegisterBtn) {\r\n      //   const formData = {\r\n      //     email: values.email,\r\n      //     tenantName: values.workplace,\r\n      //     password: values.password,\r\n      //     firstName: values.firstName,\r\n      //     lastName: values.lastName,\r\n      //   };\r\n      //   registerTenant(formData).then((data) => {\r\n      //     if (data.status === false) {\r\n      //        Swal.fire({\r\n      //         icon: \"error\",\r\n      //         title: \"Error\",\r\n      //         text: data.error,\r\n      //         showCloseButton: true,\r\n      //         showConfirmButton: false,\r\n      //         width: 400,\r\n      //       });\r\n      //     } else {\r\n      //       Swal.fire({\r\n      //         icon: \"success\",\r\n      //         title: \"Success\",\r\n      //         text: \"Account Created Successfully\",\r\n      //         showCloseButton: true,\r\n      //         showConfirmButton: false,\r\n      //         width: 400,\r\n      //       });\r\n      //     }\r\n      //     navigate(\"/session/signin\");\r\n      //   });\r\n      //   return null;\r\n      // }\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <JWTRegister>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item sm={6} xs={12}>\r\n            <ContentBox>\r\n              <img\r\n                width=\"100%\"\r\n                alt=\"Register\"\r\n                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n              />\r\n            </ContentBox>\r\n          </Grid>\r\n\r\n          <Grid item sm={6} xs={12}>\r\n            <Box p={4} height=\"100%\">\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                validationSchema={validationSchema}\r\n                initialValues={initialValues}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      label=\"First Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.firstName}\r\n                      onChange={handleChange}\r\n                      helperText={touched.firstName && errors.firstName}\r\n                      error={Boolean(errors.firstName && touched.firstName)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.lastName}\r\n                      onChange={handleChange}\r\n                      helperText={touched.lastName && errors.lastName}\r\n                      error={Boolean(errors.lastName && touched.lastName)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"workplace\"\r\n                      label=\"Workplace Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.workplace}\r\n                      onChange={handleChange}\r\n                      helperText={touched.workplace && errors.workplace}\r\n                      error={Boolean(errors.workplace && touched.workplace)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    {showVerifyOTPBtn && (\r\n                      <TextField\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        type=\"number\"\r\n                        name=\"otp\"\r\n                        label=\"OTP\"\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        value={values.otp}\r\n                        onChange={handleChange}\r\n                        helperText={touched.otp && errors.otp}\r\n                        error={Boolean(errors.otp && touched.otp)}\r\n                        sx={{ mb: 3 }}\r\n                      />\r\n                    )}\r\n\r\n                    {showRegisterBtn && (\r\n                      <LoadingButton\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        loading={loading}\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, mt: 3 }}\r\n                      >\r\n                        Regiser\r\n                      </LoadingButton>\r\n                    )}\r\n                    {showSendEmailBtn && (\r\n                      <LoadingButton\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        loading={loading}\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, mt: 3 }}\r\n                      >\r\n                        Verfiy Email\r\n                      </LoadingButton>\r\n                    )}\r\n                    {showVerifyOTPBtn && (\r\n                      <LoadingButton\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        loading={loading}\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, mt: 3 }}\r\n                      >\r\n                        Verfiy OTP\r\n                      </LoadingButton>\r\n                    )}\r\n\r\n                    <Paragraph>\r\n                      Already have an account?\r\n                      <NavLink\r\n                        to=\"/session/signin\"\r\n                        style={{\r\n                          color: theme.palette.primary.main,\r\n                          marginLeft: 5,\r\n                        }}\r\n                      >\r\n                        Login\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </JWTRegister>\r\n  );\r\n};\r\n\r\nexport default JwtRegister;\r\n"],"sourceRoot":""}