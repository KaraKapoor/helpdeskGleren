{"version":3,"sources":["app/views/sessions/JwtRegister.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","theme","useTheme","navigate","useAuth","register","useNavigate","useState","loading","setLoading","showSendEmailBtn","setShowSendEmailBtn","showVerifyOTPBtn","setShowVerifyOTPBtn","showRegisterBtn","setShowRegisterBtn","className","container","item","sm","xs","width","alt","src","p","onSubmit","values","console","log","firstName","Swal","fire","icon","title","text","showCloseButton","showConfirmButton","lastName","workplace","formData","sendOTPEmail","then","data","status","error","otp","verifyOTPEmail","tenantName","registerTenant","e","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","Boolean","sx","mb","color","mt","to","style","palette","primary","main","marginLeft"],"mappings":"yQAaMA,EAAUC,YAAOC,IAAPD,EAAY,iBAAO,CAAEE,QAAS,OAAQC,WAAY,SAAU,IAEtEC,EAAaJ,YAAOD,EAAPC,EAAgB,iBAAO,CAAEK,eAAgB,SAAU,IAEhEC,EAAaN,YAAOI,EAAPJ,EAAmB,iBAAO,CAC3CO,OAAQ,OACRC,QAAS,OACTC,WAAY,sBACb,IAEKC,EAAcV,YAAOI,EAAPJ,EAAmB,iBAAO,CAC5CS,WAAY,UACZE,UAAW,mBACX,UAAW,CACTC,SAAU,IACVD,UAAW,IACXE,OAAQ,OACRX,QAAS,OACTY,aAAc,GACdX,WAAY,UAEf,IAGKY,EAAgB,CACpBC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,UAAU,GAINC,EAAmBC,MAAaC,MAAM,CAC1CL,SAAUI,MACPE,IAAI,EAAG,uCACPC,SAAS,yBACZR,MAAOK,MAAaL,MAAM,yBAAyBQ,SAAS,wBAwU/CC,UArUK,WAClB,IAAMC,EAAQC,cAERC,GADeC,cAAbC,SACSC,eACjB,EAA8BC,oBAAS,GAAM,mBAAtCC,EAAO,KAAEC,EAAU,KAC1B,EAAgDF,oBAAS,GAAK,mBAAvDG,EAAgB,KAAEC,EAAmB,KAC5C,EAAgDJ,oBAAS,GAAM,mBAAxDK,EAAgB,KAAEC,EAAmB,KAC5C,EAA8CN,oBAAS,GAAM,mBAAtDO,EAAe,KAAEC,EAAkB,KAmJ1C,OACE,cAAC9B,EAAW,UACV,cAAC,IAAI,CAAC+B,UAAU,OAAM,SACpB,eAAC,IAAI,CAACC,WAAS,YACb,cAAC,IAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAG,SACvB,cAACvC,EAAU,UACT,qBACEwC,MAAM,OACNC,IAAI,WACJC,IAAI,uDAKV,cAAC,IAAI,CAACL,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAG,SACvB,cAAC,IAAG,CAACI,EAAG,EAAG1C,OAAO,OAAM,SACtB,cAAC,IAAM,CACL2C,SA7JW,SAACC,GAExB,GADAC,QAAQC,IAAIF,IACPA,EAAOG,UACV,OAAOC,IAAKC,KAAK,CACbC,KAAM,UACNC,MAAO,UACPC,KAAM,+BACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAER,IAAKK,EAAOW,SACf,OAAOP,IAAKC,KAAK,CACbC,KAAM,UACNC,MAAO,UACPC,KAAM,8BACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAER,IAAKK,EAAOnC,MACf,OAAOuC,IAAKC,KAAK,CACbC,KAAM,UACNC,MAAO,UACPC,KAAM,0BACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAER,IAAKK,EAAOY,UACf,OAAOR,IAAKC,KAAK,CACbC,KAAM,UACNC,MAAO,UACPC,KAAM,mCACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAGbZ,GAAW,GAEX,IACE,GAAIC,EAAkB,CAClB,IAAM6B,EAAW,CACbhD,MAAOmC,EAAOnC,OAElBiD,YAAaD,GAAUE,MAAK,SAACC,GACzB,OAAoB,IAAhBA,EAAKC,OACEb,IAAKC,KAAK,CACbC,KAAM,QACNC,MAAO,QACPC,KAAMQ,EAAKE,MACXT,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,OAGXS,IAAKC,KAAK,CACNC,KAAM,UACNC,MAAO,UACPC,KAAM,wBACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAEXV,GAAoB,GACpBE,GAAoB,GACb,KAGf,GACJ,MAAO,GAAID,EAAkB,CACzB,IAAM2B,EAAW,CACbM,IAAKnB,EAAOmB,IACZtD,MAAOmC,EAAOnC,OAElBuD,YAAeP,GAAUE,MAAK,SAACC,GAC3B,OAAoB,IAAhBA,EAAKC,OACEb,IAAKC,KAAK,CACbC,KAAM,QACNC,MAAO,QACPC,KAAMQ,EAAKE,MACXT,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,OAGXS,IAAKC,KAAK,CACNC,KAAM,UACNC,MAAO,UACPC,KAAM,4BACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAEXR,GAAoB,GACpBE,GAAmB,GACZ,KAGf,GACJ,MAAO,GAAID,EAAiB,CACxB,IAAMyB,EAAW,CACbhD,MAAOmC,EAAOnC,MACdwD,WAAYrB,EAAOY,UACnB9C,SAAUkC,EAAOlC,SACjBqC,UAAWH,EAAOG,UAClBQ,SAAUX,EAAOW,UAwBrB,OAtBAW,YAAeT,GAAUE,MAAK,SAACC,GAC3B,IAAoB,IAAhBA,EAAKC,OACL,OAAOb,IAAKC,KAAK,CACbC,KAAM,QACNC,MAAO,QACPC,KAAMQ,EAAKE,MACXT,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAGXS,IAAKC,KAAK,CACNC,KAAM,UACNC,MAAO,UACPC,KAAM,+BACNC,iBAAiB,EACjBC,mBAAmB,EACnBf,MAAO,MAGflB,EAAS,kBACb,IACO,IACX,CACAM,GAAW,EAIf,CAHE,MAAOwC,GACLtB,QAAQC,IAAIqB,GACZxC,GAAW,EACf,CACA,EAoBcd,iBAAkBA,EAClBL,cAAeA,EAAc,SAE5B,gBAAGoC,EAAM,EAANA,OAAQwB,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAAY,OACjE,uBAAM7B,SAAU6B,EAAa,UAC3B,cAAC,IAAS,CACRC,WAAS,EACTC,KAAK,QACLC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOnC,MACdwE,SAAUX,EACVY,WAAYb,EAAQ5D,OAAS2D,EAAO3D,MACpCqD,MAAOqB,QAAQf,EAAO3D,OAAS4D,EAAQ5D,OACvC2E,GAAI,CAAEC,GAAI,KAEb,cAAC,IAAS,CACPZ,WAAS,EACTC,KAAK,QACLC,KAAK,OACLC,KAAK,YACLC,MAAM,aACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOG,UACdkC,SAAUX,EACVY,WAAYb,EAAQtB,WAAaqB,EAAOrB,UACxCe,MAAOqB,QAAQf,EAAOrB,WAAasB,EAAQtB,WAC3CqC,GAAI,CAAEC,GAAI,KAEZ,cAAC,IAAS,CACRZ,WAAS,EACTC,KAAK,QACLC,KAAK,OACLC,KAAK,WACLC,MAAM,YACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOW,SACd0B,SAAUX,EACVY,WAAYb,EAAQd,UAAYa,EAAOb,SACvCO,MAAOqB,QAAQf,EAAOb,UAAYc,EAAQd,UAC1C6B,GAAI,CAAEC,GAAI,KAEZ,cAAC,IAAS,CACRZ,WAAS,EACTC,KAAK,QACLE,KAAK,WACLD,KAAK,WACLE,MAAM,WACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOlC,SACduE,SAAUX,EACVY,WAAYb,EAAQ3D,UAAY0D,EAAO1D,SACvCoD,MAAOqB,QAAQf,EAAO1D,UAAY2D,EAAQ3D,UAC1C0E,GAAI,CAAEC,GAAI,KAEV,cAAC,IAAS,CACVZ,WAAS,EACTC,KAAK,QACLC,KAAK,OACLC,KAAK,YACLC,MAAM,iBACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOY,UACdyB,SAAUX,EACVY,WAAYb,EAAQb,WAAaY,EAAOZ,UACxCM,MAAOqB,QAAQf,EAAOZ,WAAaa,EAAQb,WAC3C4B,GAAI,CAAEC,GAAI,KAGVvD,GACA,cAAC,IAAS,CACV2C,WAAS,EACTC,KAAK,QACLC,KAAK,SACLC,KAAK,MACLC,MAAM,MACNC,QAAQ,WACRC,OAAQR,EACRS,MAAOpC,EAAOmB,IACdkB,SAAUX,EACVY,WAAYb,EAAQN,KAAOK,EAAOL,IAClCD,MAAOqB,QAAQf,EAAOL,KAAOM,EAAQN,KACrCqB,GAAI,CAAEC,GAAI,KAMVrD,GAEC,cAAC,IAAa,CACd2C,KAAK,SACLW,MAAM,UACN5D,QAASA,EACToD,QAAQ,YACRM,GAAI,CAAEC,GAAI,EAAGE,GAAI,GAAI,qBAKvB3D,GAEC,cAAC,IAAa,CACZ+C,KAAK,SACLW,MAAM,UACN5D,QAASA,EACToD,QAAQ,YACRM,GAAI,CAAEC,GAAI,EAAGE,GAAI,GAAI,0BAOvBzD,GACA,cAAC,IAAa,CACd6C,KAAK,SACLW,MAAM,UACN5D,QAASA,EACToD,QAAQ,YACRM,GAAI,CAAEC,GAAI,EAAGE,GAAI,GAAI,wBAMvB,eAAC,IAAS,sCAER,cAAC,IAAO,CACNC,GAAG,kBACHC,MAAO,CAAEH,MAAOnE,EAAMuE,QAAQC,QAAQC,KAAMC,WAAY,GAAI,wBAK3D,cASzB,C","file":"static/js/35.4316cd92.chunk.js","sourcesContent":["import { useTheme } from '@emotion/react';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\nimport { Paragraph } from 'app/components/Typography';\r\nimport useAuth from 'app/hooks/useAuth';\r\nimport { Formik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport Swal from 'sweetalert2'\r\nimport { registerTenant, sendOTPEmail, verifyOTPEmail } from 'app/services/userService';\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  background: 'rgba(0, 0, 0, 0.01)',\r\n}));\r\n\r\nconst JWTRegister = styled(JustifyBox)(() => ({\r\n  background: '#1A2038',\r\n  minHeight: '100vh !important',\r\n  '& .card': {\r\n    maxWidth: 800,\r\n    minHeight: 400,\r\n    margin: '1rem',\r\n    display: 'flex',\r\n    borderRadius: 12,\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  username: '',\r\n  remember: true,\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, 'Password must be 6 character length')\r\n    .required('Password is required!'),\r\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\r\n});\r\n\r\nconst JwtRegister = () => {\r\n  const theme = useTheme();\r\n  const { register } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [showSendEmailBtn, setShowSendEmailBtn] = useState(true);\r\n  const [showVerifyOTPBtn, setShowVerifyOTPBtn] = useState(false);\r\n  const [showRegisterBtn, setShowRegisterBtn] = useState(false);\r\n\r\n  \r\n  const onClickVerifyEmail=(values)=>{\r\n    console.log(values)\r\n  }\r\n\r\n  const handleFormSubmit = (values) => {\r\n    console.log(values);\r\n    if (!values.firstName) {\r\n      return Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Warning',\r\n          text: \"Please enter your First Name\",\r\n          showCloseButton: true,\r\n          showConfirmButton: false,\r\n          width: 400,\r\n      })\r\n  } else if (!values.lastName) {\r\n      return Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Warning',\r\n          text: \"Please enter your Last Name\",\r\n          showCloseButton: true,\r\n          showConfirmButton: false,\r\n          width: 400,\r\n      })\r\n  } else if (!values.email) {\r\n      return Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Warning',\r\n          text: \"Please enter your email\",\r\n          showCloseButton: true,\r\n          showConfirmButton: false,\r\n          width: 400,\r\n      })\r\n  } else if (!values.workplace) {\r\n      return Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Warning',\r\n          text: \"Please enter your Workplace Name\",\r\n          showCloseButton: true,\r\n          showConfirmButton: false,\r\n          width: 400,\r\n      })\r\n  }\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (showSendEmailBtn) {\r\n          const formData = {\r\n              email: values.email\r\n          }\r\n          sendOTPEmail(formData).then((data) => {\r\n              if (data.status === false) {\r\n                  return Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: data.error,\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n              } else {\r\n                  Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: \"OTP Sent Successfully\",\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n                  setShowSendEmailBtn(false);\r\n                  setShowVerifyOTPBtn(true);\r\n                  return null;\r\n  \r\n              }\r\n          })\r\n      } else if (showVerifyOTPBtn) {\r\n          const formData = {\r\n              otp: values.otp,\r\n              email: values.email\r\n          }\r\n          verifyOTPEmail(formData).then((data) => {\r\n              if (data.status === false) {\r\n                  return Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: data.error,\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n              } else {\r\n                  Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: \"OTP Verified Successfully\",\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n                  setShowVerifyOTPBtn(false);\r\n                  setShowRegisterBtn(true);\r\n                  return null;\r\n  \r\n              }\r\n          })\r\n      } else if (showRegisterBtn) {\r\n          const formData = {\r\n              email: values.email,\r\n              tenantName: values.workplace,\r\n              password: values.password,\r\n              firstName: values.firstName,\r\n              lastName: values.lastName\r\n          }\r\n          registerTenant(formData).then((data) => {\r\n              if (data.status === false) {\r\n                  return Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: data.error,\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n              } else {\r\n                  Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: \"Account Created Successfully\",\r\n                      showCloseButton: true,\r\n                      showConfirmButton: false,\r\n                      width: 400,\r\n                  })\r\n              }\r\n              navigate('/session/signin')\r\n          })\r\n          return null;\r\n      }\r\n      setLoading(false);\r\n  } catch (e) {\r\n      console.log(e);\r\n      setLoading(false);\r\n  }\r\n  };\r\n\r\n  return (\r\n    <JWTRegister>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item sm={6} xs={12}>\r\n            <ContentBox>\r\n              <img\r\n                width=\"100%\"\r\n                alt=\"Register\"\r\n                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n              />\r\n            </ContentBox>\r\n          </Grid>\r\n\r\n          <Grid item sm={6} xs={12}>\r\n            <Box p={4} height=\"100%\">\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                validationSchema={validationSchema}\r\n                initialValues={initialValues}\r\n              >\r\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                   <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      label=\"First Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.firstName}\r\n                      onChange={handleChange}\r\n                      helperText={touched.firstName && errors.firstName}\r\n                      error={Boolean(errors.firstName && touched.firstName)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.lastName}\r\n                      onChange={handleChange}\r\n                      helperText={touched.lastName && errors.lastName}\r\n                      error={Boolean(errors.lastName && touched.lastName)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                      <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"workplace\"\r\n                      label=\"Workplace Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.workplace}\r\n                      onChange={handleChange}\r\n                      helperText={touched.workplace && errors.workplace}\r\n                      error={Boolean(errors.workplace && touched.workplace)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    {\r\n                      showVerifyOTPBtn && \r\n                      <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"otp\"\r\n                      label=\"OTP\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.otp}\r\n                      onChange={handleChange}\r\n                      helperText={touched.otp && errors.otp}\r\n                      error={Boolean(errors.otp && touched.otp)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n\r\n                    }\r\n\r\n                    {\r\n                      showRegisterBtn\r\n                       && \r\n                       <LoadingButton\r\n                       type=\"submit\"\r\n                       color=\"primary\"\r\n                       loading={loading}\r\n                       variant=\"contained\"\r\n                       sx={{ mb: 2, mt: 3 }}\r\n                     >\r\n                       Regiser\r\n                     </LoadingButton>\r\n                    }\r\n                    {showSendEmailBtn\r\n                     && \r\n                      <LoadingButton\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        loading={loading}\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, mt: 3 }}\r\n                        >\r\n                        Verfiy Email\r\n                      </LoadingButton>\r\n                    \r\n                    }\r\n                    {\r\n                      showVerifyOTPBtn && \r\n                      <LoadingButton\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ mb: 2, mt: 3 }}\r\n                      >\r\n                      Verfiy OTP\r\n                    </LoadingButton>\r\n                    }\r\n\r\n                    <Paragraph>\r\n                      Already have an account?\r\n                      <NavLink\r\n                        to=\"/session/signin\"\r\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\r\n                      >\r\n                        Login\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </JWTRegister>\r\n  );\r\n};\r\n\r\nexport default JwtRegister;\r\n"],"sourceRoot":""}